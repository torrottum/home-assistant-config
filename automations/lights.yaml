---
# TODO: Move to pyscript and take door sensor into account
- alias: Bathroom motion sensor turns light on/off
  id: bathroom_motion_sensor_turns_light_on_off
  use_blueprint:
    path: homeassistant/motion_light.yaml
    input:
      no_motion_wait: '420'  # Tr√•dfri sensor, 3 min + 420 sec = 10 min
      motion_entity: binary_sensor.bathroom_motion_occupancy
      light_target:
        entity_id: light.bathroom_ceiling

- alias: Entrance motion sensor turns light on/off
  id: entrance_motion_sensor_turns_light_on_off
  use_blueprint:
    path: simple_on_off.yaml
    input:
      trigger_entity: binary_sensor.entrance_motion_sensor_occupancy
      target_entity:
        entity_id: light.entrance

- alias: Storage room door sensor turns light on/off
  id: storage_room_door_sensor_turns_light_on_off
  use_blueprint:
    path: simple_on_off.yaml
    input:
      trigger_entity: binary_sensor.storage_room_door_contact
      target_entity:
        entity_id: light.storage_room

- alias: Turn on living room lights when someone comes home
  id: turn_on_living_room_lights_when_someone_comes_home
  trigger:
    - platform: state
      entity_id: binary_sensor.someone_home
      from: 'off'
      to: 'on'
  condition:
    - condition: sun
      after: sunset
      after_offset: -00:30:00
  action:
    - service: light.turn_on
      entity_id: light.living_room_ceiling

- alias: Turn on living room lights before sunset
  id: turn_on_living_room_lights_before_sunset
  trigger:
    - platform: sun
      event: sunset
      offset: '-00:30:00'
  condition:
    - condition: state
      entity_id: binary_sensor.someone_home
      state: 'on'
    - condition: state
      entity_id: light.living_room_ceiling
      state: 'off'
    - condition: state
      entity_id: input_boolean.night_mode
      state: 'off'
  action:
    - service: light.turn_on
      entity_id: light.living_room_ceiling

- alias: "Reading chair controls reading lamp"
  id: reading_chair_controls_reading_lamp
  mode: restart
  trigger:
    - platform: state
      entity_id: binary_sensor.reading_chair_presence_contact
      # State is flipped.
      # The sensor is a contact sensor wired to a car seat pressure sensor
      to: 'off'
  condition:
    - condition: state
      entity_id: light.reading_lamp
      state: 'off'
    - condition: state
      entity_id: input_boolean.guest_mode
      state: 'off'
  action:
    - service: light.turn_on
      entity_id: light.reading_lamp
    - wait_for_trigger:
        - platform: state
          entity_id: binary_sensor.reading_chair_presence_contact
          to: 'on'
          for: '00:00:10'
    - service: light.turn_off
      entity_id: light.reading_lamp

- alias: Bedroom motion sensor turns bedroom lights on/off
  id: bedroom_motion_sensor_turns_lights_on_off
  trigger:
    platform: state
    entity_id: binary_sensor.bedroom_motion_occupancy
    from: "off"
    to: "on"
  condition:
    - condition: state
      entity_id: light.bedroom_ceiling
      state: "off"
  action:
    - service: light.turn_on
      target:
        entity_id: light.bedroom_ceiling
    - wait_for_trigger:
        platform: state
        entity_id: binary_sensor.bedroom_motion_occupancy
        from: "on"
        to: "off"
    - delay: 120
    - service: light.turn_off
      target:
        entity_id: light.bedroom_ceiling

- alias: "Light: turn off bedroom lights after 2 hours"
  id: turn_off_bedroom_lights_after_2_hours
  trigger:
    platform: state
    entity_id: light.bedroom_ceiling
    from: "off"
    to: "on"
    for: "02:00:00"
  condition:
    - condition: "state"
      entity_id: "binary_sensor.bedroom_motion_occupancy"
      state: "off"
  action:
    - service: light.turn_off
      target:
        entity_id: light.bedroom_ceiling

- alias: "Adaptive lighting: reset manual_control after 1 hour"
  id: adaptive_lightning_reset_manual_control_after_1_hour
  mode: parallel
  max: 100
  trigger:
    - platform: event
      event_type: adaptive_lighting.manual_control
  variables:
    light: "{{ trigger.event.data.entity_id }}"
    switch: "{{ trigger.event.data.switch }}"
  action:
    - delay: "01:00:00"
    - condition: template
      value_template: "{{ light in state_attr(switch, 'manual_control') }}"
    - service: adaptive_lighting.set_manual_control
      data:
        entity_id: "{{ switch }}"
        lights: "{{ light }}"
        manual_control: false
